1)
SELECT 
    d.name AS director_name,
    COUNT(m.movie_id) AS number_of_movies,
    SUM(m.box_office_million) AS total_earnings,
    GROUP_CONCAT(m.title ORDER BY m.release_date ASC SEPARATOR ', ') AS movie_titles
FROM 
    directors d
JOIN 
    movies m ON d.director_id = m.director_id
WHERE 
    m.release_date >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR)
GROUP BY 
    d.director_id, d.name
HAVING 
    SUM(m.box_office_million) > 200
ORDER BY 
    total_earnings DESC;

2)
SELECT 
    g.genre_name,
    COUNT(m.movie_id) AS number_of_movies,
    AVG(m.box_office_million) AS average_earnings,
    MAX(m.box_office_million) AS max_earnings,
    MIN(m.box_office_million) AS min_earnings
FROM 
    genres g
JOIN 
    movie_genres mg ON g.genre_id = mg.genre_id
JOIN 
    movies m ON mg.movie_id = m.movie_id
WHERE 
    YEAR(m.release_date) = 2023
GROUP BY 
    g.genre_id, g.genre_name
ORDER BY 
    average_earnings DESC;
3)
SELECT 
    m.title,
    m.release_date,
    m.box_office_million,
    d.name AS director_name
FROM 
    movies m
JOIN 
    movie_genres mg ON m.movie_id = mg.movie_id
JOIN 
    genres g ON mg.genre_id = g.genre_id
JOIN 
    directors d ON m.director_id = d.director_id
WHERE 
    g.genre_name IN ('Science Fiction', 'Adventure')
ORDER BY 
    m.box_office_million DESC;
4)
SELECT 
    MONTH(m.release_date) AS release_month,
    COUNT(*) AS total_releases,
    SUM(CASE WHEN g.genre_name = 'Action' THEN 1 ELSE 0 END) AS action_releases,
    SUM(CASE WHEN g.genre_name = 'Comedy' THEN 1 ELSE 0 END) AS comedy_releases,
    SUM(CASE WHEN g.genre_name = 'Drama' THEN 1 ELSE 0 END) AS drama_releases,
    SUM(CASE WHEN g.genre_name = 'Horror' THEN 1 ELSE 0 END) AS horror_releases,
    SUM(CASE WHEN g.genre_name = 'Science Fiction' THEN 1 ELSE 0 END) AS scifi_releases
FROM 
    movies m
JOIN 
    movie_genres mg ON m.movie_id = mg.movie_id
JOIN 
    genres g ON mg.genre_id = g.genre_id
WHERE 
    YEAR(m.release_date) = 2023
GROUP BY 
    MONTH(m.release_date)
WITH ROLLUP;

5)
SELECT 
    g.genre_name,
    SUM(m.box_office_million) AS total_earnings
FROM 
    genres g
JOIN 
    movie_genres mg ON g.genre_id = mg.genre_id
JOIN 
    movies m ON mg.movie_id = m.movie_id
WHERE 
    YEAR(m.release_date) = 2023
GROUP BY 
    g.genre_id, g.genre_name
ORDER BY 
    total_earnings DESC;


6)
SELECT DISTINCT g.genre_name
FROM genres g
JOIN movie_genres mg ON g.genre_id = mg.genre_id
JOIN movies m ON mg.movie_id = m.movie_id
JOIN directors d ON m.director_id = d.director_id
WHERE d.name = 'Christopher Nolan' AND g.genre_name NOT IN (
    SELECT g.genre_name
    FROM genres g
    JOIN movie_genres mg ON g.genre_id = mg.genre_id
    JOIN movies m ON mg.movie_id = m.movie_id
    JOIN directors d ON m.director_id = d.director_id
    WHERE d.name = 'Sofia Coppala'

------------------------------------------------------------------------------------------------------------------------------------------------------
lab3

13)
SELECT s.StudentID, s.Name
FROM Students s
LEFT JOIN Classes c ON s.ClassID = c.ClassID
WHERE c.ClassID IS NULL;

14)
SELECT t.TeacherID, t.TeacherName
FROM Teachers t
LEFT JOIN Classes c ON t.TeacherID = c.TeacherID
WHERE c.TeacherID IS NULL;

15)
SELECT Name FROM Students
UNION
SELECT TeacherName FROM Teachers;

16)
SELECT DISTINCT c.TeacherID, t.TeacherName
FROM Classes c
JOIN Students s ON c.ClassID = s.ClassID
JOIN Grades g ON s.StudentID = g.StudentID
JOIN Teachers t ON c.TeacherID = t.TeacherID
WHERE g.Score > 95
AND c.TeacherID IN (
    SELECT c.TeacherID
    FROM Classes c
    JOIN Students s ON c.ClassID = s.ClassID
    JOIN Grades g ON s.StudentID = g.StudentID
    WHERE g.Score < 65
);

17)
SELECT 
    g1.StudentID,
    s.Name AS StudentName,
    g1.Subject AS PreviousSubject,
    g1.Score AS PreviousScore,
    g2.Subject AS CurrentSubject,
    g2.Score AS CurrentScore
FROM 
    Grades g1
JOIN 
    Grades g2 ON g1.StudentID = g2.StudentID
        AND g1.Subject <> g2.Subject -- Ensure different subjects
        AND g1.Score < g2.Score -- Ensure improvement
JOIN 
    Students s ON g1.StudentID = s.StudentID
WHERE 
    g1.Subject IS NOT NULL
    AND g2.Subject IS NOT NULL
ORDER BY 
    g1.StudentID, g1.Subject, g2.Subject;



Lab 4

18)
SELECT 
    e.result_id,
    e.constituency_id,
    e.candidate_id,
    c.name AS candidate_name,
    c.party AS candidate_party,
    e.votes AS current_year_votes,
    AVG(prev_e.votes) AS avg_previous_votes
FROM 
    Election_Results e
JOIN 
    Candidates c ON e.candidate_id = c.candidate_id
LEFT JOIN 
    (SELECT 
         candidate_id,
         constituency_id,
         AVG(votes) AS votes
     FROM 
         Election_Results
     WHERE 
         election_year != 2024
     GROUP BY 
         candidate_id, constituency_id
    ) AS prev_e ON e.candidate_id = prev_e.candidate_id AND e.constituency_id = prev_e.constituency_id
WHERE 
    e.election_year = 2024
GROUP BY 
    e.result_id, e.constituency_id, e.candidate_id, c.name, c.party, e.votes;


19)

WITH RankedResults AS (
    SELECT 
        constituency_id,
        candidate_id,
        votes,
        ROW_NUMBER() 
        OVER (PARTITION BY constituency_id ORDER BY votes DESC) AS ran
    FROM 
        Election_Results
    WHERE 
        election_year = 2024
)

SELECT 
    r.constituency_id,
    r.candidate_id,
    c.name AS candidate_name,
    c.party AS candidate_party,
    r.votes,
    r.ran,
    r.votes - LEAD(r.votes) OVER (PARTITION BY r.constituency_id ORDER BY r.votes DESC) AS lead_votes
FROM 
    RankedResults r
JOIN 
    Candidates c ON r.candidate_id = c.candidate_id
WHERE 
    r.ran = 1;

20)
WITH CandidatePerformance AS (
    SELECT 
        e.constituency_id,
        e.candidate_id,
        e.election_year,
        e.votes,
        MAX(e.votes) OVER (PARTITION BY e.constituency_id, e.candidate_id) AS peak_votes,
        AVG(e.votes) OVER (PARTITION BY e.constituency_id, e.candidate_id 
                           ORDER BY e.election_year 
                           ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg
    FROM 
        Election_Results e
    WHERE 
        e.election_year BETWEEN 2022 AND 2024
)

SELECT 
    constituency_id,
    candidate_id,
    election_year,
    votes,
    peak_votes,
    moving_avg
FROM 
    CandidatePerformance;


